# Original Author: Justin Henderson
#         SANS Instructor and author of SANS SEC555: SIEM and Tactical Analytics
# Updated by: Doug Burks
# Last Update: 2/7/2018
#
# This conf file is based on accepting logs for conn.log from Bro systems
filter {
    if [type] =~ "bro_" {
        # If message is not json, fall back to csv or dissect.
        if [message] !~ /^{.*}$/ {
            mutate {
              gsub => [ "message", "[\"']", "" ]
            }
            if [type] == "bro_conn" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","protocol","service","duration","original_bytes","respond_bytes","connection_state","local_orig","local_respond","missed_bytes","history","original_packets","original_ip_bytes","respond_packets","respond_ip_bytes","tunnel_parents","original_country_code","respond_country_code","sensor_name"]

                # If you use a custom delimiter, change the following value in between the quotes to your delimiter. Otherwise, insert a literal <tab> in between the two quotes on your logstash system, use a text editor like nano that doesn't convert tabs to spaces.
                    separator => "	"
                }

                translate {
                    field => "connection_state"

                    destination => "connection_state_description"

                    dictionary => [
                                  "S0", "Connection attempt seen, no reply",
                                  "S1", "Connection established, not terminated",
                                  "S2", "Connection established and close attempt by originator seen (but no reply from responder)",
                                  "S3", "Connection established and close attempt by responder seen (but no reply from originator)",
                                  "SF", "Normal SYN/FIN completion",
                                  "REJ", "Connection attempt rejected",
                                  "RSTO", "Connection established, originator aborted (sent a RST)",
                                  "RSTR", "Established, responder aborted",
                                  "RSTOS0", "Originator sent a SYN followed by a RST, we never saw a SYN-ACK from the responder",
                                  "RSTRH", "Responder sent a SYN ACK followed by a RST, we never saw a SYN from the (purported) originator",
                                  "SH", "Originator sent a SYN followed by a FIN, we never saw a SYN ACK from the responder (hence the connection was 'half' open)",
                                  "SHR", "Responder sent a SYN ACK followed by a FIN, we never saw a SYN from the originator",
                                  "OTH", "No SYN seen, just midstream traffic (a 'partial connection' that was not later closed)"
                                  ]
                }
            } else if [type] == "bro_dhcp" {
                csv {
                    columns => [ "timestamp", "uid", "source_ip", "destination_ip", "mac", "hostname", "client_fqdn", "domain_name", "requested_ip", "assigned_ip", "lease_time","client_message", "server_message", "message_types", "duration" ]
                    separator => "	"
                }
                # Remove fields with empty values (-) to prevent field data type conflict
                ruby {
                  code =>"
                      hash = event.to_hash.each do |key,value|
                          if value == '-'
                              event.remove(key)
                          end
                      end"
                }  
            } else if [type] == "bro_dns" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","protocol","transaction_id","rtt","query","query_class","query_class_name","query_type","query_type_name","rcode","rcode_name","aa","tc","rd","ra","z","answers","ttls","rejected"]
            
                    #If you use a custom delimiter, change the following value in between the quotes to your delimiter. Otherwise, insert a literal <tab> in between the two quotes on your logstash system, use a text editor like nano that doesn't convert tabs to spaces.
                    separator => "	"
                }
                mutate {
                    add_tag => [ "dns" ]
                }
                if [ttls] == "-" {
                    mutate {
                        remove_field => [ "ttls" ]
                    }
                }
                if [rtt] == "-" {
                    mutate {
                        remove_field => [ "rtt" ]
                    }
                }
            } else if [type] == "bro_dpd" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","protocol","analyzer","failure_reason"]
                    separator => "	"
                }
            } else if [type] == "bro_files" {
                csv {
                    columns => ["timestamp","fuid","file_ip","destination_ip","connection_uids","source","depth","analyzer","mimetype","file_name","duration","local_orig","is_orig","seen_bytes","total_bytes","missing_bytes","overflow_bytes","timed_out","parent_fuid","md5","sha1","sha256","extracted"]
                    separator => "	"
                }
            } else if [type] == "bro_ftp" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","username","password","ftp_command","ftp_argument","mimetype","file_size","reply_code","reply_message","data_channel_passive","data_channel_source_ip","data_channel_destination_ip","data_channel_destination_port","fuid"]
                    separator => "	"
                }
            } else if [type] == "bro_http" {
                dissect {
                    mapping => {
                        message => "%{timestamp}	%{uid}	%{source_ip}	%{source_port}	%{destination_ip}	%{destination_port}	%{trans_depth}	%{method}	%{virtual_host}	%{uri}	%{referrer}	%{version}	%{useragent}	%{request_body_length}	%{response_body_length}	%{status_code}	%{status_message}	%{info_code}	%{info_message}	%{http-tags}	%{user}	%{password}	%{proxied}	%{orig_fuids}	%{orig_filenames}	%{orig_mime_types}	%{resp_fuids}	%{resp_filenames}	%{resp_mime_types}"
                    }
                }
                if [http-tags] {
                    mutate {
                        remove_field => [ "http-tags" ]
                    }
                }
                if [useragent] == "-" {
                    mutate {
                        remove_field => [ "useragent" ]
                    }
                }
            } else if [type] == "bro_irc" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","nick","irc_username","irc_command","value","additional_info","dcc_file_name","dcc_file_size","dcc_mime_type","fuid"]
                    separator => "	"
                }
            } else if [type] == "bro_kerberos" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","request_type","client","service","kerberos_success","error_message","valid_from","valid_till","cipher","forwardable","renewable","client_certificate_subject","client_certificate_fuid","server_certificate_subject","server_certificate_fuid"]
                    separator => "	"
                }
            } else if [type] == "bro_notice" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","fuid","file_mime_type","file_description","protocol","note","msg","sub_msg","source_ip","destination_ip","p","n","peer_description","action","suppress_for","dropped","destination_country_code","destination_region","destination_city","destination_latitude","destination_longitude"]
                    separator => "	"
                }
            } else if [type] == "bro_rdp" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","cookie","result","security_protocol","keyboard_layout","client_build","client_name","client_digital_product_id","desktop_width","desktop_height","requested_color_depth","certificate_type","certificate_count","certificate_permanent","encryption_level","encryption_method"]
                    separator => "	"
                }
            } else if [type] == "bro_signatures" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","note","signature_id","event_message","sub_message","signature_count","host_count"]
                    separator => "	"
                }
            } else if [type] == "bro_smtp" {
                dissect {
                    mapping => {
                        message => "%{timestamp}	%{uid}	%{source_ip}	%{source_port}	%{destination_ip}	%{destination_port}	%{trans_depth}	%{helo}	%{mail_from}	%{recipient_to}	%{mail_date}	%{from}	%{to}	%{cc}	%{reply_to}	%{message_id}	%{in_reply_to}	%{subject}	%{x_originating_ip}	%{first_received}	%{second_received}	%{last_reply}	%{path}	%{useragent}	%{tls}	%{fuids}	%{is_webmail}"
                    }
                }
                if [useragent] == "-" {
                    mutate {
                        remove_field => [ "useragent" ]
                    }
                }
            } else if [type] == "bro_snmp" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","duration","version","community","get_requests","get_bulk_requests","get_responses","set_requests","display_string","up_since"]
                    separator => "	"
                }
            } else if [type] == "bro_software" {
                csv {
                    columns => ["timestamp","source_ip","source_port","software_type","name","version_major","version_minor","version_minor2","version_minor3","version_additional_info","unparsed_version"]
                    separator => "	"
                }
            } else if [type] == "bro_ssh" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","version","authentication_success","authentication_attempts","direction","client","server","cipher_algorithm","mac_algorithm","compression_algorithm","kex_algorithm","host_key_algorithm","host_key","destination_country_code","destination_region","destination_city","destination_latitude","destination_longitude","hassh_version","hassh","hassh_server","client_host_key_algorithms","hassh_algorithms","server_host_key_algorithms","hassh_server_algorithms"]
                    separator => "	"
                }
            } else if [type] == "bro_ssl" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","version","cipher","curve","server_name","resumed","last_alert","next_protocol","established","certificate_chain_fuids","client_certificate_chain_fuids","certificate_subject","certificate_issuer","client_subject","client_issuer","validation_status","ja3","ja3s"]
                    separator => "	"
                }
                mutate {
                    gsub => [ "subject", "\\\\,", "|" ]
                }
                kv {
                    include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "DC", "GN", "pseudonym", "serialNumber", "title", "initials" ]
                    field_split => ","
                    source => "certificate_issuer"
                }
                mutate {
                    rename => { "CN" => "issuer_common_name"}
                    rename => { "C" => "issuer_country_code"}
                    rename => { "O" => "issuer_organization"}
                    rename => { "OU" => "issuer_organization_unit"}
                    rename => { "ST" => "issuer_state"}
                    rename => { "SN" => "issuer_surname"}
                    rename => { "L" => "issuer_locality"}
                    rename => { "DC" => "issuer_distinguished_name"}
                    rename => { "GN" => "issuer_given_name"}
                    rename => { "pseudonym" => "issuer_pseudonym"}
                    rename => { "serialNumber" => "issuer_serial_number"}
                    rename => { "title" => "issuer_title"}
                    rename => { "initials" => "issuer_initials"}
                }
                kv {
                    include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "GN", "pseudonym", "serialNumber", "title", "initials" ]
                    field_split => ","
                    source => "certificate_subject"
                }
                mutate {
                    rename => { "CN" => "certificate_common_name"}
                    rename => { "C" => "certificate_country_code"}
                    rename => { "O" => "certificate_organization"}
                    rename => { "OU" => "certificate_organization_unit"}
                    rename => { "ST" => "certificate_state"}
                    rename => { "SN" => "certificate_surname"}
                    rename => { "L" => "certificate_locality"}
                    rename => { "GN" => "certificate_given_name"}
                    rename => { "pseudonym" => "certificate_pseudonym"}
                    rename => { "serialNumber" => "certificate_serial_number"}
                    rename => { "title" => "certificate_title"}
                    rename => { "initials" => "certificate_initials"}
                  }
                if [certificate_subject] == "-" {
                    mutate {
                        remove_field => [ "certificate_subject" ]
                    }
                }
                if [certificate_issuer] == "-" {
                    mutate {
                        remove_field => [ "certificate_issuer" ]
                    }
                }
                if [certificate_common_name] {
                    ruby {
                        code => "event.set('certificate_common_name_length', event.get('certificate_common_name').length)"
                    }
                }
                if [issuer_common_name] {
                    ruby {
                        code => "event.set('issuer_common_name_length', event.get('issuer_common_name').length)"
                    }
                }
                if [server_name] {
                    if [server_name] == "-" {
                        mutate {
                            remove_field => [ "server_name" ]
                        }
                    } else {
                        ruby {
                            code => "event.set('server_name_length', event.get('server_name').length)"
                        }
                    }
                }
                if [certificate_chain_fuids] {
                    if [certificate_chain_fuids] == "-" {
                        mutate {
                            remove_field => [ "certificate_chain_fuids" ]
                        }
                    } else {
                        ruby {
                            code => "event.set('certificate_chain_count', event.get('certificate_chain_fuids').count(',') + 1)"
                        }
                        mutate {
                            convert => [ "certificate_chain_length", "integer" ]
                        }
                    }
                }
                if [client_certificate_chain_fuids] == "-" {
                    mutate {
                        remove_field => [ "client_certificate_chain_fuids" ]
                    }
                }
                if [client_issuer] == "-" {
                    mutate {
                        remove_field => [ "client_issuer" ]
                    }
                }
                if [client_subject] == "-" {
                    mutate {
                        remove_field => [ "client_subject" ]
                    }
                }
                if [curve] == "-" {
                    mutate {
                        remove_field => [ "curve" ]
                    }
                }
                if [issuer] == "-" {
                    mutate {
                        remove_field => [ "issuer" ]
                    }
                }
                if [query] == "-" {
                    mutate {
                        remove_field => [ "query" ]
                    }
                }
                if [subject] == "-" {
                    mutate {
                        remove_field => [ "subject" ]
                    }
                }
                if [validation_status] == "-" {
                    mutate {
                        remove_field => [ "validation_status" ]
                    }
                }
                if [ja3] == "-" {
                    mutate {
                        remove_field => [ "ja3" ]
                    }
                }
            } else if [type] == "bro_syslog" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","protocol","facility","severity","message"]
                    separator => "	"
                }
            } else if [type] == "bro_tunnels" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","tunnel_type","action"]
                    separator => "	"
                }
            } else if [type] == "bro_weird" {
                dissect {
                    mapping => {
                        message => "%{timestamp}	%{uid}	%{source_ip}	%{source_port}	%{destination_ip}	%{destination_port}	%{name}	%{additional_info}	%{notice}	%{peer}"
                    }
                }
            } else if [type] == "bro_mysql" {
                dissect {
                    mapping => {
                        message => "%{timestamp}	%{uid}	%{source_ip}	%{source_port}	%{destination_ip}	%{destination_port}	%{mysql_command}	%{mysql_argument}	%{mysql_success}	%{rows}	%{response}"
                    }
                }
            } else if [type] == "bro_socks" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","version","user","password","server_status","request_host","request_name","request_port","bound_host","bound_name","bound_port"]
                    separator => "	"
                }
            } else if [type] == "bro_x509" {
                dissect {
                    mapping => {
                        message => "%{timestamp}	%{id}	%{certificate_version}	%{certificate_serial}	%{certificate_subject}	%{certificate_issuer}	%{certificate_not_valid_before}	%{certificate_not_valid_after}	%{certificate_key_algorithm}	%{certificate_signing_algorithm}	%{certificate_key_type}	%{certificate_key_length}	%{certificate_exponent}	%{certificate_curve}	%{san_dns}	%{san_uri}	%{san_email}	%{san_ip}	%{basic_constraints_ca}	%{basic_constraints_path_length}"
                    }
                }

                mutate {
                    gsub => [ "certificate_issuer", "\\\\,", "|" ]
                    gsub => [ "certificate_subject", "\\\\,", "|" ]
                }

                kv {
                    include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "DC", "GN", "pseudonym", "serialNumber", "title", "initials" ]
                    field_split => ","
                    source => "certificate_issuer"
                }
                mutate {
                    rename => { "CN" => "issuer_common_name"}
                    rename => { "C" => "issuer_country_code"}
                    rename => { "O" => "issuer_organization"}
                    rename => { "OU" => "issuer_organization_unit"}
                    rename => { "ST" => "issuer_state"}
                    rename => { "SN" => "issuer_surname"}
                    rename => { "L" => "issuer_locality"}
                    rename => { "DC" => "issuer_distinguished_name"}
                    rename => { "GN" => "issuer_given_name"}
                    rename => { "pseudonym" => "issuer_pseudonym"}
                    rename => { "serialNumber" => "issuer_serial_number"}
                    rename => { "title" => "issuer_title"}
                    rename => { "initials" => "issuer_initials"}
                }
                kv {
                    include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "GN", "pseudonym", "serialNumber", "title", "initials" ]
                    field_split => ","
                    source => "certificate_subject"
                }
                mutate {
                    rename => { "CN" => "certificate_common_name"}
                    rename => { "C" => "certificate_country_code"}
                    rename => { "O" => "certificate_organization"}
                    rename => { "OU" => "certificate_organization_unit"}
                    rename => { "ST" => "certificate_state"}
                    rename => { "SN" => "certificate_surname"}
                    rename => { "L" => "certificate_locality"}
                    rename => { "GN" => "certificate_given_name"}
                    rename => { "pseudonym" => "certificate_pseudonym"}
                    rename => { "serialNumber" => "certificate_serial_number"}
                    rename => { "title" => "certificate_title"}
                    rename => { "initials" => "certificate_initials"}
                    convert => [ "certificate_key_length", "integer" ]
                    convert => [ "certificate_not_valid_after", "integer" ]
                    convert => [ "certificate_not_valid_before", "integer" ]
                }
                if [query] == "-" {
                    mutate {
                        remove_field => [ "query" ]
                    }
                }
                if [san_dns] == "-" {
                    mutate {
                        remove_field => [ "san_dns" ]
                    }
                }
                if [san_email] == "-" {
                    mutate {
                        remove_field => [ "san_email" ]
                    }
                }
                if [san_uri] == "-" {
                    mutate {
                        remove_field => [ "san_uri" ]
                    }
                }
                if [san_ip] == "-" {
                    mutate {
                        remove_field => [ "san_ip" ]
                    }
                }
                if [certificate_common_name] {
                    ruby {
                        code => "event.set('certificate_common_name_length', event.get('certificate_common_name').length)"
                    }
                }
                if [issuer_common_name] {
                    ruby {
                        code => "event.set('issuer_common_name_length', event.get('issuer_common_name').length)"
                    }
                }
                if [certificate_not_valid_after] == "-" {
                    mutate {
                        remove_field => [ "certificate_not_valid_after" ]
                    }
                }
                if [certificate_not_valid_before] == "-" {
                    mutate {
                        remove_field => [ "certificate_not_valid_before" ]
                    }
                }
                if [certificate_not_valid_after] and [certificate_not_valid_before] {
                    ruby {
                        code => "event.set('certificate_number_days_valid', ((event.get('certificate_not_valid_after') - event.get('certificate_not_valid_before')) / 86400).ceil)"
                    }
                    date {
                          match => [ "certificate_not_valid_after", "UNIX" ]
                          target => "certificate_not_valid_after"
                    }
                    date {
                          match => [ "certificate_not_valid_before", "UNIX" ]
                          target => "certificate_not_valid_before"
                    }
                }
            } else if [type] == "bro_intel" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","indicator","indicator_type","seen_where","seen_node","matched","sources","fuid","mimetype","file_description"]
                    separator => "	"
                }
            } else if [type] == "bro_modbus" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","function","exception"]
                    separator => "	"
                }
            } else if [type] == "bro_sip" {
                dissect {
                    mapping => {
                        message => "%{timestamp}	%{uid}	%{source_ip}	%{source_port}	%{destination_ip}	%{destination_port}	%{trans_depth}	%{method}	%{uri}	%{date}	%{request_from}	%{request_to}	%{response_from}	%{response_to}	%{reply_to}	%{call_id}	%{seq}	%{subject}	%{request_path}	%{response_path}	%{user_agent}	%{status_code}	%{status_msg}	%{warning}	%{request_body_len}	%{response_body_len}	%{content_type}"
                    }
                }
            } else if [type] == "bro_radius" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","username","mac","framed_addr","remote_ip","connect_info","reply_message","result","ttl","logged"]
                    separator => "	"
                }
                if [remote_ip] == "-" {
                    mutate {
                        remove_field => [ "remote_ip" ]
                    }
                }

                # Remove the ttl and framed_addr fields
                if [ttl] {
                    mutate {
                        remove_field => [ "ttl" ]
                    }
                }
                if [framed_addr] {
                    mutate {
                        remove_field => [ "framed_addr" ]
                    }
                }
            } else if [type] == "bro_pe" {
                csv {
                    columns => ["timestamp","fuid","machine","compile_ts","os","subsystem","is_exe","is_64bit","uses_aslr","uses_dep","uses_code_integrity","uses_seh","has_import_table","has_export_table","has_cert_table","has_debug_data","section_names"]
                    separator => "	"
                }
            } else if [type] == "bro_rfb" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","client_major_version","client_minor_version","server_major_version","server_minor_version","authentication_method","auth","share_flag","desktop_name","width","height"]
                    separator => "	"
                }
            } else if [type] == "bro_dnp3" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","fc_request","fc_reply","iin"]
                    separator => "	"
                }
            } else if [type] == "bro_smb_files" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","fuid","action","path","name","size","prev_name","times_modified","times_accessed","times_created","times_changed"]
                    separator => "	"
                }
            } else if [type] == "bro_smb_mapping" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","path","service","native_file_system","share_type"]
                    separator => "	"
                }
            } else if [type] == "bro_ntlm" {
                csv {
                    columns => [ "timestamp", "uid", "source_ip", "source_port", "destination_ip", "destination_port", "username", "hostname", "domain_name", "server_nb_computer_name", "server_dns_computer_name", "server_tree_name", "ntlm_success"]
                    separator => "	"
                }
                ruby {
                    code =>"
                        hash = event.to_hash.each do |key,value|
                            if value == '-'
                                event.remove(key)
                            end
                        end"
                }
            } else if [type] == "bro_dce_rpc" {
                csv {
                    columns => ["timestamp","uid","source_ip","source_port","destination_ip","destination_port","rtt","named_pipe","endpoint","operation"]
                    separator => "	"
                }

                if [rtt] == "-" {
                    mutate {
                        remove_field => [ "rtt" ]
                    }
                }
            }
        }
    }
}
