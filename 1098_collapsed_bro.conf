filter {
    if [type] =~ "bro_" {
        if [message] =~ /^{.*}$/ {
            mutate {
                    rename => { "tags" => "tags-orig" }
            }

            json {
                    source => "message"
            }

            mutate {
                    rename => { "ts" => "timestamp" }
                    rename => { "id.orig_h" => "source_ip" }
                    rename => { "id.orig_p" => "source_port" }
                    rename => { "id.resp_h" => "destination_ip" }
                    rename => { "id.resp_p" => "destination_port" }
            }
            if [type] == "bro_conn" {
                mutate {
                    rename => { "proto" => "protocol" }
                    rename => { "orig_bytes" => "original_bytes" }
                    rename => { "resp_bytes" => "respond_bytes" }
                    rename => { "conn_state" => "connection_state" }
                    rename => { "local_resp" => "local_respond" }
                    rename => { "orig_pkts" => "original_packets" }
                    rename => { "orig_ip_bytes" => "original_ip_bytes" }
                    rename => { "resp_pkts" => "respond_packets" }
                    rename => { "resp_ip_bytes" => "respond_ip_bytes" }
                    rename => { "orig_cc" => "original_country_code" }
                    rename => { "resp_cc" => "respond_country_code" }
                    rename => { "sensorname" => "sensor_name" }
                  }
                translate {
                    field => "connection_state"

                    destination => "connection_state_description"

                    dictionary => [
                                  "S0", "Connection attempt seen, no reply",
                                  "S1", "Connection established, not terminated",
                                  "S2", "Connection established and close attempt by originator seen (but no reply from responder)",
                                  "S3", "Connection established and close attempt by responder seen (but no reply from originator)",
                                  "SF", "Normal SYN/FIN completion",
                                  "REJ", "Connection attempt rejected",
                                  "RSTO", "Connection established, originator aborted (sent a RST)",
                                  "RSTR", "Established, responder aborted",
                                  "RSTOS0", "Originator sent a SYN followed by a RST, we never saw a SYN-ACK from the responder",
                                  "RSTRH", "Responder sent a SYN ACK followed by a RST, we never saw a SYN from the (purported) originator",
                                  "SH", "Originator sent a SYN followed by a FIN, we never saw a SYN ACK from the responder (hence the connection was 'half' open)",
                                  "SHR", "Responder sent a SYN ACK followed by a FIN, we never saw a SYN from the originator",
                                  "OTH", "No SYN seen, just midstream traffic (a 'partial connection' that was not later closed)"
                                  ]
                }
            } else if [type] == "bro_dhcp" {
                mutate {
                    rename => { "trans_id" => "transaction_id" }
                    rename => { "assigned_addr" => "assigned_ip" }
                    rename => { "client_addr" => "source_ip" }
                    rename => { "server_addr" => "destination_ip" }
                    rename => { "requested_addr" => "requested_ip" }
                    rename => { "domain" => "domain_name" }
                    rename => { "host_name" => "hostname" }
                    rename => { "msg_types" => "message_types" }
                    rename => { "uids" => "uid" }
                }
            } else if [type] == "bro_dns" {
                mutate {
                    rename => { "proto" => "protocol" }
                    rename => { "trans_id" => "transaction_id" }
                    rename => { "qclass" => "query_class" }
                    rename => { "qclass_name" => "query_class_name" }
                    rename => { "qtype" => "query_type" }
                    rename => { "qtype_name" => "query_type_name" }
                    rename => { "AA" => "aa" }
                    rename => { "TC" => "tc" }
                    rename => { "RD" => "rd" }
                    rename => { "RA" => "ra" }
                    rename => { "Z" => "z" }
                    rename => { "TTLs" => "ttls" }
                }
                if [tags-orig] {
                    mutate {
                        rename => { "tags-orig" => "tags" }
                        add_tag => [ "dns" ]
                    }
                }
                if [ttls] == "-" {
                    mutate {
                        remove_field => [ "ttls" ]
                    }
                }
                if [rtt] == "-" {
                    mutate {
                        remove_field => [ "rtt" ]
                    }
                }
            } else if [type] == "bro_dpd" {
                mutate {
                    rename => { "proto" => "protocol" }
                }
            } else if [type] == "bro_files" {
                mutate {
                    rename => { "tx_hosts" => "file_ip" }
                    rename => { "rx_hosts" => "destination_ip" }
                    rename => { "conn_uids" => "connection_uids" }
                    rename => { "analyzers" => "analyzer" }
                    rename => { "mime_type" => "mimetype" }
                    rename => { "filename" => "file_name" }
                    rename => { "timedout" => "timed_out" }
                }
            } else if [type] == "bro_ftp" {
                mutate {
                    rename => { "user" => "username" }
                    rename => { "command" => "ftp_command" }
                    rename => { "arg" => "ftp_argument" }
                    rename => { "mime_type" => "mimetype" }
                    rename => { "reply_msg" => "reply_message" }
                    rename => { "data_channel.passive" => "data_channel_passive" }
                    rename => { "data_channel.orig_h" => "data_channel_source_ip" }
                    rename => { "data_channel.resp_h" => "data_channel_destination_ip" }
                    rename => { "data_channel.resp_p" => "data_channel_destination_port" }
                }

                mutate {
                    convert => { "reply" => "string" }
                }
            } else if [type] == "bro_http" {
                mutate {
                    rename => { "host" => "virtual_host" }
                    rename => { "user_agent" => "useragent" }
                    rename => { "request_body_len" => "request_body_length" }
                    rename => { "response_body_len" => "response_body_length" }
                    rename => { "status_msg" => "status_message" }
                    rename => { "info_msg" => "info_message" }
                    rename => { "tags" => "http-tags" }
                    rename => { "username" => "user" }
                }
                if [http-tags] {
                    mutate {
                        remove_field => [ "http-tags" ]
                    }
                }
                if [useragent] == "-" {
                    mutate {
                        remove_field => [ "useragent" ]
                    }
                }
            } else if [type] == "bro_irc" {
                mutate {
                    rename => { "user" => "irc_username" }
                    rename => { "command" => "irc_command" }
                    rename => { "addl" => "additional_info" }
                }
            } else if [type] == "bro_kerberos" {
                mutate {
                    rename => { "success" => "kerberos_success" }
                    rename => { "error_msg" => "error_message" }
                    rename => { "from" => "valid_from" }
                    rename => { "till" => "valid_till" }
                    rename => { "client_cert_subject" => "client_certificate_subject" }
                    rename => { "client_cert_fuid" => "client_certificate_fuid" }
                    rename => { "server_cert_subject" => "server_certificate_subject" }
                    rename => { "server_cert_fuid" => "server_certificate_fuid" }
                }

                mutate {
                    convert => { "kerberos_success" => "string" }
                    convert => { "renewable" => "string" }
                }
            } else if [type] == "bro_notice" {
                mutate {
                    rename => { "mime" => "file_mime_type" }
                    rename => { "desc" => "file_description" }
                    rename => { "proto" => "protocol" }
                    rename => { "note" => "note" }
                    rename => { "msg" => "msg" }
                    rename => { "sub" => "sub_msg" }
                    rename => { "src" => "source_ip" }
                    rename => { "dst" => "destination_ip" }
                    rename => { "peer_descr" => "peer_description" }
                    rename => { "actions" => "action" }
                }
            } else if [type] == "bro_rdp" {
                mutate {
                    rename => { "client_dig_product_id" => "client_digital_product_id" }
                    rename => { "cert_type" => "certificate_type" }
                    rename => { "cert_count" => "certificate_count" }
                    rename => { "cert_permanent" => "certificate_permanent" }
                }
            } else if [type] == "bro_signatures" {
                mutate {
                    rename => { "sig_id" => "signature_id" }
                    rename => { "event_msg" => "event_message" }
                    rename => { "sub_msg" => "sub_message" }
                    rename => { "sig_count" => "signature_count" }
                }
            } else if [type] == "bro_smtp" {
                mutate {
                    rename => { "mailfrom" => "mail_from" }
                    rename => { "rcptto" => "recipient_to" }
                    rename => { "date" => "mail_date" }
                    rename => { "msg_id" => "message_id" }
                    rename => { "user_agent" => "useragent" }
                }

                mutate {
                    convert => { "tls" => "string" }
                    convert => { "is_webmail" => "string" }
                }
                if [useragent] == "-" {
                    mutate {
                        remove_field => [ "useragent" ]
                    }
                }
            } else if [type] == "bro_software" {
                mutate {
                    rename => { "host" => "source_ip" }
                    rename => { "host_p" => "source_port" }
                    rename => { "version.major" => "version_major" }
                    rename => { "version.minor" => "version_minor" }
                    rename => { "version.minor2" => "version_minor2" }
                    rename => { "version.minor3" => "version_minor3" }
                    rename => { "version.addl" => "version_additional_info" }
                }

                mutate {
                    convert => { "version_major" => "string" }
                    convert => { "version_minor" => "string" }
                }
            } else if [type] == "bro_ssh" {
                mutate {
                    rename => { "auth_success" => "authentication_success" }
                    rename => { "auth_attempts" => "authentication_attempts" }
                    rename => { "cipher_alg" => "cipher_algorithm" }
                    rename => { "compression_alg" => "compression_algorithm" }
                    rename => { "cshka" => "client_host_key_algorithms" }
                    rename => { "host_key_alg" => "host_key_algorithm" }
                    rename => { "hasshAlgorithms" => "hassh_algorithms" }
                    rename => { "hasshServer" => "hassh_server" }
                    rename => { "hasshServerAlgorithms" => "hassh_server_algorithms" }
                    rename => { "hasshVersion" => "hassh_version" }
                    rename => { "kex_alg" => "kex_algorithm" }
                    rename => { "mac_alg" => "mac_algorithm" }
                    rename => { "sshka" => "server_host_key_algorithms" }
                }

                mutate {
                    convert => { "authentication_success" => "string" }
                }
            } else if [type] == "bro_ssl" {
                mutate {
                    rename => { "cert_chain_fuids" => "certificate_chain_fuids" }
                    rename => { "client_cert_chain_fuids" => "client_certificate_chain_fuids" }
                    rename => { "subject" => "certificate_subject" }
                    rename => { "issuer" => "certificate_issuer" }
                }
                mutate {
                    gsub => [ "subject", "\\\\,", "|" ]
                }
                kv {
                    include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "DC", "GN", "pseudonym", "serialNumber", "title", "initials" ]
                    field_split => ","
                    source => "certificate_issuer"
                }
                mutate {
                    rename => { "CN" => "issuer_common_name"}
                    rename => { "C" => "issuer_country_code"}
                    rename => { "O" => "issuer_organization"}
                    rename => { "OU" => "issuer_organization_unit"}
                    rename => { "ST" => "issuer_state"}
                    rename => { "SN" => "issuer_surname"}
                    rename => { "L" => "issuer_locality"}
                    rename => { "DC" => "issuer_distinguished_name"}
                    rename => { "GN" => "issuer_given_name"}
                    rename => { "pseudonym" => "issuer_pseudonym"}
                    rename => { "serialNumber" => "issuer_serial_number"}
                    rename => { "title" => "issuer_title"}
                    rename => { "initials" => "issuer_initials"}
                }
                kv {
                    include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "GN", "pseudonym", "serialNumber", "title", "initials" ]
                    field_split => ","
                    source => "certificate_subject"
                }
                mutate {
                    rename => { "CN" => "certificate_common_name"}
                    rename => { "C" => "certificate_country_code"}
                    rename => { "O" => "certificate_organization"}
                    rename => { "OU" => "certificate_organization_unit"}
                    rename => { "ST" => "certificate_state"}
                    rename => { "SN" => "certificate_surname"}
                    rename => { "L" => "certificate_locality"}
                    rename => { "GN" => "certificate_given_name"}
                    rename => { "pseudonym" => "certificate_pseudonym"}
                    rename => { "serialNumber" => "certificate_serial_number"}
                    rename => { "title" => "certificate_title"}
                    rename => { "initials" => "certificate_initials"}
                }
                if [certificate_subject] == "-" {
                    mutate {
                        remove_field => [ "certificate_subject" ]
                    }
                }
                if [certificate_issuer] == "-" {
                    mutate {
                        remove_field => [ "certificate_issuer" ]
                    }
                }
                if [certificate_common_name] {
                    ruby {
                        code => "event.set('certificate_common_name_length', event.get('certificate_common_name').length)"
                    }
                }
                if [issuer_common_name] {
                    ruby {
                        code => "event.set('issuer_common_name_length', event.get('issuer_common_name').length)"
                    }
                }
                if [server_name] {
                    if [server_name] == "-" {
                        mutate {
                            remove_field => [ "server_name" ]
                        }
                    } else {
                        ruby {
                            code => "event.set('server_name_length', event.get('server_name').length)"
                        }
                    }
                }
                if [certificate_chain_fuids] {
                    if [certificate_chain_fuids] == "-" {
                        mutate {
                            remove_field => [ "certificate_chain_fuids" ]
                        }
                    } else {
                        ruby {
                            code => "event.set('certificate_chain_count', event.get('certificate_chain_fuids').count(',') + 1)"
                        }
                        mutate {
                            convert => [ "certificate_chain_length", "integer" ]
                        }
                    }
                }
                if [client_certificate_chain_fuids] == "-" {
                    mutate {
                        remove_field => [ "client_certificate_chain_fuids" ]
                    }
                }
                if [client_issuer] == "-" {
                    mutate {
                        remove_field => [ "client_issuer" ]
                    }
                }
                if [client_subject] == "-" {
                    mutate {
                        remove_field => [ "client_subject" ]
                    }
                }
                if [curve] == "-" {
                    mutate {
                        remove_field => [ "curve" ]
                    }
                }
                if [issuer] == "-" {
                    mutate {
                        remove_field => [ "issuer" ]
                    }
                }
                if [query] == "-" {
                    mutate {
                        remove_field => [ "query" ]
                    }
                }
                if [subject] == "-" {
                    mutate {
                        remove_field => [ "subject" ]
                    }
                }
                if [validation_status] == "-" {
                    mutate {
                        remove_field => [ "validation_status" ]
                    }
                }
                if [ja3] == "-" {
                    mutate {
                        remove_field => [ "ja3" ]
                    }
                }
            } else if [type] == "bro_syslog" {
                mutate {
                    rename => { "proto" => "protocol" }
                }
            } else if [type] == "bro_weird" {
                mutate {
                    rename => { "addl" => "additional_info" }
                }
                
                mutate {
                    convert => { "notice" => "string" }
                }
            } else if [type] == "bro_mysql" {
                mutate {
                    rename => { "cmd" => "mysql_command" }
                    rename => { "arg" => "mysql_argument" }
                    rename => { "success" => "mysql_success" }
                }

                mutate {
                    convert => { "mysql_success" => "string" }
                }
            } else if [type] == "bro_socks" {
                mutate {
                    rename => { "status" => "server_status" }
                    rename => { "request_p" => "request_port" }
                    rename => { "bound_p" => "bound_port" }
                }
            } else if [type] == "bro_x509" {
                mutate {
                    rename => { "certificate.version" => "certificate_version" }
                    rename => { "certificate.serial" => "certificate_serial" }
                    rename => { "certificate.subject" => "certificate_subject" }
                    rename => { "certificate.issuer" => "certificate_issuer" }
                    rename => { "certificate.not_valid_before" => "certificate_not_valid_before" }
                    rename => { "certificate.not_valid_after" => "certificate_not_valid_after" }
                    rename => { "certificate.key_alg" => "certificate_key_algorithm" }
                    rename => { "certificate.sig_alg" => "certificate_signing_algorithm" }
                    rename => { "certificate.key_type" => "certificate_key_type" }
                    rename => { "certificate.key_length" => "certificate_key_length" }
                    rename => { "certificate.exponent" => "certificate_exponent" }
                    rename => { "certificate.curve" => "certificate_curve" }
                    rename => { "san.dns" => "san_dns" }
                    rename => { "san.uri" => "san_uri" }
                    rename => { "san.email" => "san_email" }
                    rename => { "san.ip" => "san_ip" }
                    rename => { "basic_constraints.ca" => "basic_constraints_ca" }
                    rename => { "basic_constraints.path_length" => "basic_constraints_path_length" }
                }
                mutate {
                    gsub => [ "certificate_issuer", "\\\\,", "|" ]
                    gsub => [ "certificate_subject", "\\\\,", "|" ]
                }
                kv {
                    include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "DC", "GN", "pseudonym", "serialNumber", "title", "initials" ]
                    field_split => ","
                    source => "certificate_issuer"
                }
                mutate {
                    rename => { "CN" => "issuer_common_name"}
                    rename => { "C" => "issuer_country_code"}
                    rename => { "O" => "issuer_organization"}
                    rename => { "OU" => "issuer_organization_unit"}
                    rename => { "ST" => "issuer_state"}
                    rename => { "SN" => "issuer_surname"}
                    rename => { "L" => "issuer_locality"}
                    rename => { "DC" => "issuer_distinguished_name"}
                    rename => { "GN" => "issuer_given_name"}
                    rename => { "pseudonym" => "issuer_pseudonym"}
                    rename => { "serialNumber" => "issuer_serial_number"}
                    rename => { "title" => "issuer_title"}
                    rename => { "initials" => "issuer_initials"}
                }
                kv {
                    include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "GN", "pseudonym", "serialNumber", "title", "initials" ]
                    field_split => ","
                    source => "certificate_subject"
                }
                mutate {
                    rename => { "CN" => "certificate_common_name"}
                    rename => { "C" => "certificate_country_code"}
                    rename => { "O" => "certificate_organization"}
                    rename => { "OU" => "certificate_organization_unit"}
                    rename => { "ST" => "certificate_state"}
                    rename => { "SN" => "certificate_surname"}
                    rename => { "L" => "certificate_locality"}
                    rename => { "GN" => "certificate_given_name"}
                    rename => { "pseudonym" => "certificate_pseudonym"}
                    rename => { "serialNumber" => "certificate_serial_number"}
                    rename => { "title" => "certificate_title"}
                    rename => { "initials" => "certificate_initials"}
                    convert => [ "certificate_key_length", "integer" ]
                    convert => [ "certificate_not_valid_after", "integer" ]
                    convert => [ "certificate_not_valid_before", "integer" ]
                }
                if [query] == "-" {
                    mutate {
                        remove_field => [ "query" ]
                    }
                }
                if [san_dns] == "-" {
                    mutate {
                        remove_field => [ "san_dns" ]
                    }
                }
                if [san_email] == "-" {
                    mutate {
                        remove_field => [ "san_email" ]
                    }
                }
                if [san_uri] == "-" {
                    mutate {
                        remove_field => [ "san_uri" ]
                    }
                }
                if [san_ip] == "-" {
                    mutate {
                        remove_field => [ "san_ip" ]
                    }
                }
                if [certificate_common_name] {
                    ruby {
                        code => "event.set('certificate_common_name_length', event.get('certificate_common_name').length)"
                    }
                }
                if [issuer_common_name] {
                    ruby {
                        code => "event.set('issuer_common_name_length', event.get('issuer_common_name').length)"
                    }
                }
                if [certificate_not_valid_after] == "-" {
                    mutate {
                        remove_field => [ "certificate_not_valid_after" ]
                    }
                }
                if [certificate_not_valid_before] == "-" {
                    mutate {
                        remove_field => [ "certificate_not_valid_before" ]
                    }
                }
                if [certificate_not_valid_after] and [certificate_not_valid_before] {
                    ruby {
                        code => "event.set('certificate_number_days_valid', ((event.get('certificate_not_valid_after') - event.get('certificate_not_valid_before')) / 86400).ceil)"
                    }
                    date {
                        match => [ "certificate_not_valid_after", "UNIX" ]
                        target => "certificate_not_valid_after"
                    }
                    date {
                        match => [ "certificate_not_valid_before", "UNIX" ]
                        target => "certificate_not_valid_before"
                    }
                }
            } else if [type] == "bro_intel" {
                mutate {
                    rename => { "seen.indicator" => "indicator" }
                    rename => { "seen.indicator_type" => "indicator_type" }
                    rename => { "seen.where" => "seen_where" }
                    rename => { "seen.node" => "seen_node" }
                    rename => { "file_mime_type" => "mimetype" }
                    rename => { "file_desc" => "file_description" }
                }
            } else if [type] == "bro_modbus" {
                mutate {
                    rename => { "func" => "function" }
                }
            } else if [type] == "bro_radius" {
                mutate {
                    rename => { "reply_msg" => "reply_message" }
                }
                if [remote_ip] == "-" {
                    mutate {
                        remove_field => [ "remote_ip" ]
                    }
                }
                if [ttl] {
                    mutate {
                        remove_field => [ "ttl" ]
                    }
                }
                if [framed_addr] {
                    mutate {
                        remove_field => [ "framed_addr" ]
                    }
                }
            } else if [type] == "bro_rfb" {
                mutate {
                    convert => { "auth" => "string" }
                    convert => { "share_flag" => "string" }
                }
            } else if [type] == "bro_smb_files" {
                mutate {
                    rename => { "times.modified" => "times_modified" }
                    rename => { "times.accessed" => "times_accessed" }
                    rename => { "times.created" => "times_created" }
                    rename => { "times.changed" => "times_changed" }
                }
            } else if [type] == "bro_ntlm" {
                mutate {
                    rename => { "domainname" => "domain_name" }
                    rename => { "success" => "ntlm_success" }
                }
            } else if [type] == "bro_dce_rpc" {
                if [rtt] == "-" {
                    mutate {
                        remove_field => [ "rtt" ]
                    }
                }
            }
            if [tags-orig] {
                mutate {
                    rename => { "tags-orig" => "tags" }
                }
            }
        }
    }
}
